
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(mgcv)
Loading required package: nlme
This is mgcv 1.8-22. For overview type 'help("mgcv-package")'.
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> 
> setwd("/home/qinzhen/R")
> load('ps4_q4.RData')
> 
> xvalidate = function(folds, cores){
+   load('ps4_q4.RData')
+   ## Randomly shuffle the data
+   n = nrow(sample_data)
+   rands = sample_data[sample(n),]
+   
+   ## Create equally size folds
+   kfolds = cut(seq(1, n),breaks=folds,labels=FALSE)
+   
+   # Perform k fold cross validation
+   ymse = function(k){
+     testIndexes <- which(kfolds==k,arr.ind=TRUE)
+     testData <- sample_data[testIndexes, ]
+     trainData <- sample_data[-testIndexes, ]
+     
+     ## fit the model
+     fit=mgcv::gam(y~x,data=trainData,family=binomial(link=logit))
+     ypred = predict(fit,newdata = testData)
+     return(mean((ypred-testData$y)^2))
+   }
+   
+   ## check if computing in parallel is needed
+   if(cores%%1 == 0 & cores > 1){
+     cl = makeCluster(cores)
+     registerDoParallel(cl)
+     
+     #Perform k fold cross validation in parallel
+     results = foreach(case = 1:folds) %dopar% {
+       ## do with case #
+       ymse(case)
+     }
+     stopCluster(cl)
+   }else if(cores == 1){
+     results = list()
+     
+     #Perform k fold cross validation locally
+     for(case in 1:folds){
+       results[case]=ymse(case)
+     }
+   }else{
+     return(0)
+   }
+   return(results)
+ }
> 
> # test the function
> mean(unlist(xvalidate(10,2)))
[1] 0.2355297
> 
> proc.time()
   user  system elapsed 
  1.225   0.096   5.816 
